var Array = [Int]()  //定义可变数组
var flag = 0      //用于记录判断质数
    for x  in 2...10000{
        for y in 2..<x{
            if x%y==0{
                flag+=1
                break
            }
        }
        if flag==0{
            Array.append(x)
        }
        flag=0
}

//第一种实现降序
func compare(m:Int,n:Int)->Bool{
    return m>n
}
Array.sort(by:compare)
print("第一种数组降序排列为：")
print(Array)
//第二种降序
Array.sort(by:{
    (m:Int,n:Int)->Bool in
        return m>n
})
print("第二种数组降序排列为:")
print(Array)
//第三种
Array.sort{
    (m,n)->Bool  in
        return m>n
}
print("第三种数组降序排列为:")
print(Array)
//第四种
Array.sort{(m,n) in
    return m>n
}
print("第四种数组降序排列为:")
print(Array)
//第五种
Array.sort(by:>)
print("第五种数组降序排列为:")
print(Array)
//第六种
Array.sort{$0>$1}
print("第六种数组降序排列为:")
print(Array) 

--------------------------------------------------------------
enum Gender:Int{
    case female=0,male
}

class Person:CustomStringConvertible{
    var firstname:String
    var lastname:String
    var age:Int=0
    var gender:Gender
    var fullname:String{
        return firstname+lastname
    }
    
    init(firstname:String,lastname:String,age:Int,gender:Gender){
        self.firstname=firstname
        self.lastname=lastname
        self.age=age
        self.gender=gender
    }//指定构造函数
    
    convenience init(age:Int){
        self.init(firstname:"Luo",lastname:"jialin",age:age,gender:Gender.male)
    }//便利构造函数
    
    var description:String{
        return "Name:\(firstname) \(lastname) age:\(age) gender:\(gender)"
    }//直接用print输出输出输出


    static func ==(one:Person,two:Person)->Bool{
        return one.fullname==two.fullname&&one.age==two.age&&one.gender==two.gender
    }
    static func !=(one:Person,two:Person)->Bool{
        return !(one==two)
    }
}

class Teacher:Person{
    var title:String
    init(title:String,firstname:String,lastname:String,age:Int,gender:Gender){
        self.title=title
        super.init(firstname:firstname,lastname:lastname,age:age,gender:gender)
    }
    
    
    convenience init(title:String){
        self.init(title:title,firstname:"wang",lastname:"dan",age:20,gender:Gender.female)
    }
    
      override var description:String{
        return "Title:\(title)"
    }
    
}

class Student:Person{
    var stuNO:String
    init(stuNO:String,firstname:String,lastname:String,age:Int,gender:Gender){
        self.stuNO=stuNO
        super.init(firstname:firstname,lastname:lastname,age:age,gender:gender)
    }
    
    convenience init(stuNO:String){
        self.init(stuNO:stuNO,firstname:"luo",lastname:"jialin",age:21,gender:Gender.male)
    }
    
    
    override var description:String{
        return "stuNO:\(stuNO)"
    }
    

}

var p1=Person(age:1)
var p2=Person(age:2)
print(p1)
print(p2)
print(p1 != p2)//重载
print(p1.description)//Person类输出
var t1=Teacher(title:"jiaoshou")
print(t1.description)//Teacher类输出输出输出
var s1=Student(stuNO:"2016110325")
var s2=Student(stuNO:"2016110301",firstname:"liu",lastname:"ha",age:10,gender:Gender.female)
print(s1.description)

var people=[p1,p2,t1,s1,s2]

var dictionary=["Person":0,"Teacher":0,"Student":0]

for count in people{
    if count is Student{
        dictionary["Student"]!+=1
    }else if count is Teacher{
        dictionary["Teacher"]!+=1
    }else{
        dictionary["Person"]!+=1
    }
}//将各对象个数输入字典

for (key,value) in dictionary{
    print("\(key):\(value)个")
}

print("按年龄排：")
people.sort(by:{
    $0.age<$1.age
})

print(people.description)

print("按名字排：")
people.sort(by:{
    $0.fullname<$1.fullname
})

print(people)

print("按性别年龄排：")
people.sort(by:{
    $0.age<$1.age&&$0.gender.rawValue<$1.gender.rawValue
})

print(people) 
